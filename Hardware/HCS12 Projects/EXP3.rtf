{\rtf1\ansi\ansicpg1252\cocoartf1138\cocoasubrtf320
{\fonttbl\f0\fnil\fcharset0 FixedsysTTF;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red255\green255\blue255;}
\margl1440\margr1440\vieww18220\viewh14000\viewkind0
\deftab720
\pard\pardeftab720

\f0\b\fs24 \cf2 \cb3 ; Shameem, Shuaib\
; 67551999\
; sshame3\
; ECE 367 - Spring 2012\
; Experiment 3 - Now Serving\
; Feb. 9th, 2012\
; This program displays a counter which is user-incremented by use of a button/switch\
\
; PIN connections\
; PortT0-6 -> Latch0/1 D1-D7\
; PortT7   -> Unconnected\
; PortM0/1 -> Latch0/1 LE\
; PortM2   -> INCREMENT button\
; PortM5   -> DISPLAY button\
\
; Define symbolic constants\'a0\
PORTT	 \'a0	EQU	$240		;Define Register Locations\
DDRT	 \'a0	EQU	$242\
PORTM \'a0 	EQU 	$250\
DDRM \'a0 \'a0	EQU	$252\
INITRG	EQU	$11\
INITRM	EQU	$10\
CLKSEL	EQU	$39\
PLLCTL	EQU	$3A\
CRGFLG	EQU	$37\
SYNR	 \'a0	EQU	$34\
REFDV	 \'a0	EQU	$35\
COPCTL	EQU	$3C\
TSCR1	 \'a0	EQU	$46\
TSCR2	 \'a0	EQU	$4D\
TIOS	 \'a0	EQU	$40\
TCNT	 \'a0	EQU	$44\
TC0	 \'a0 \'a0	EQU	$50\
TFLG1	 \'a0	EQU	$4E\
\
\
\
		ORG	$3800		; Beginning of RAM for Variables\
ONES \'a0	DS.W	1		; 1s counter\
TENS \'a0	DS.W	1		; 10s counter\
\
;\
; The main code begins here. Note the START Label\
;\
		ORG	$4000		; Beginning of Flash EEPROM\
START		LDS	#$3FCE		; Top of the Stack\
		SEI			; Turn Off Interrupts\
\'a0 \'a0 \'a0 \'a0	MOVB	#$00, INITRG	; I/O and Control Registers Start at $0000\
		MOVB	#$39, INITRM	; RAM ends at $3FFF\
;\
; We Need To Set Up The PLL So that the E-Clock = 24MHz\
;\
		BCLR CLKSEL,$80 ; disengage PLL from system\
		BSET PLLCTL,$40 ; turn on PLL\
		MOVB #$2,SYNR \'a0 ; set PLL multiplier\
		MOVB #$0,REFDV \'a0; set \'a0PLL divider\
		NOP		; No OP\
		NOP		; NO OP\
PLP 		BRCLR CRGFLG,$08,PLP ; while (!(crg.crgflg.bit.lock==1))\
		BSET CLKSEL,$80 ; engage PLL\
;\
;\
;\
		CLI		; Turn ON Interrupts\
;\
; End of \'a0setup code. You will always need the above setup code for every experiment\
;\
\'a0 	 \'a0 \'a0	\
\
		LDAA	#$FF	; Make PortT Outbound\
	 \'a0 \'a0 STAA	DDRT\
\'a0 \'a0 \'a0 \'a0 	LDAA	#$03 ; Make PortM Outbound on the higher 6 bits\
\'a0 \'a0 \'a0 \'a0 	STAA	DDRM\
\'a0 \'a0 \'a0 \'a0 	LDX	#$0000 ; Reset the counters\
\'a0 \'a0 \'a0 \'a0 	STX	ONES\
\'a0 \'a0 \'a0 \'a0 	STX	TENS\
\'a0 \'a0 \'a0 \'a0 	LDAA	#$00 ; Reset the Ports\
\'a0 \'a0 \'a0 \'a0 	STAA	PORTM\
\'a0 \'a0 \'a0 \'a0 	STAA	PORTT\
\
HERE: \'a0 	BRSET PORTM, $20, HERE ; Loop here until DISPLAY button is pressed\
	 \'a0 \'a0 \'a0\
	 \'a0 \'a0 LDAA	TABLE ; Load 0\
	 \'a0 \'a0 STAA	PORTT ; Send to LED displays\
	 \'a0 \'a0 BSET	PORTM, $01 ; Pulse the latch for the ones counter\
	 \'a0 \'a0 NOP\
	 \'a0 \'a0 NOP\
	 \'a0 \'a0 BCLR	PORTM, $01\
	 \'a0 \'a0 NOP\
	 \'a0 \'a0 NOP\
	 \'a0 \'a0 BSET	PORTM, $02 ; Pulse the latch for the tens counter\
	 \'a0 \'a0 NOP\
	 \'a0 \'a0 NOP\
	 \'a0 \'a0 BCLR	PORTM, $02\
	 \'a0 \'a0 LDAA	#$00\'a0; Reset Accumulator A\
	 \'a0 \'a0 \'a0\
INCRMNT:	BRSET		PORTM, $04, INCRMNT ; Loop here until INCREMENT button is pressed\
\
\'a0 \'a0 \'a0 \'a0 	LDX	ONES ; Load ones counter to increment\
\'a0 \'a0 \'a0 \'a0 	INX       ; Increment\
\'a0 \'a0 \'a0 \'a0 	STX	ONES ; Save ones counter\
\'a0 \'a0 \'a0 \'a0 	LDX	#$000A ; Compare ones counter to A (illegal digit)\
\'a0 \'a0 \'a0 \'a0 	CPX	ONES\
\'a0 \'a0 \'a0 \'a0 	BNE	UPDATE ;If digit is legal, update displays\
\'a0 \'a0 \'a0 \'a0 	LDX	#$00 ;Else reset digit to 0\
\'a0 \'a0 \'a0 \'a0 	STX	ONES\
\'a0 \'a0 \'a0 \'a0 	LDX	TENS ;and increment the tens counter\
\'a0 \'a0 \'a0 \'a0 	INX\
\'a0 \'a0 \'a0 \'a0 	STX	TENS\
\'a0 \'a0 \'a0 \'a0 	LDX	#$000A ; Compare tens counter to A (illegal digit)\
\'a0 \'a0 \'a0 \'a0 	CPX	TENS\
\'a0 \'a0 \'a0 \'a0 	BNE	UPDATE ;If digit is legal, update displays\
\'a0 \'a0 \'a0 \'a0 	LDX	#$0000 ;Else reset digit to 0\
\'a0 \'a0 \'a0 \'a0 	STX	TENS\
\'a0 \'a0 \'a0 \'a0 	BRA	UPDATE ;Update displays\
\'a0 \'a0 \'a0 \'a0\'a0\
UPDATE: 	BCLR	PORTM, $FF ;Clear PortM to ensure latches are not enabled\
\'a0 \'a0 \'a0 \'a0 	LDX	ONES	; Load the ones counter into register X\
\'a0 \'a0 \'a0 \'a0 	LDAA	TABLE, X ; Retrieve from table with offset X\
\'a0 \'a0 \'a0 \'a0 	STAA	PORTT	; Store digit code on PortT\
\'a0 \'a0 \'a0 \'a0 	BSET	PORTM, $01 ; Pulse ones latch to update ones display\
\'a0 \'a0 \'a0 \'a0 	NOP\
\'a0 \'a0 \'a0 \'a0 	NOP\
\'a0 \'a0 \'a0 \'a0 	BCLR	PORTM, $01\
\'a0 \'a0 \'a0 \'a0 	NOP\
\'a0 \'a0 \'a0 \'a0 	NOP\
\'a0 \'a0 \'a0 \'a0 	LDX	TENS	; Load the tens counter into register X\
\'a0 \'a0 \'a0 \'a0 	LDAA	TABLE, X	; Retrieve from table with offset X\
\'a0 \'a0 \'a0 \'a0 	STAA	PORTT ; Store digit code on PortT\
\'a0 \'a0 \'a0 \'a0 	BSET	PORTM, $02	; Pulse tens latch to update tens display\
\'a0 \'a0 \'a0 \'a0 	NOP\
\'a0 \'a0 \'a0 \'a0 	NOP\
\'a0 \'a0 \'a0 \'a0 	BCLR	PORTM, $02\
\'a0 \'a0 \'a0 \'a0 	NOP\
\'a0 \'a0 \'a0 \'a0 	NOP\
\'a0 \'a0 \'a0 \'a0 	JSR	DELAY		; Delay to account for user error/button debounce\
PRESSED:	BRCLR		PORTM, $04, PRESSED	; Ensure user let go of button\
\'a0 \'a0 \'a0 \'a0 	JSR	DELAY		; Delay to account for debounce\
\'a0 \'a0 \'a0 \'a0 	JSR	DELAY\
\'a0 \'a0 \'a0 \'a0 	BRA	INCRMNT \'a0 ; Return to polling for INCREMENT button\'a0 \'a0 \'a0\
\
\
;\
; We use some built-in timer functions to create an accurate delay\
;\
DELAY 	PSHA			; Save accumulator A on the stack\
	 \'a0 \'a0 LDY	#01		; We will repeat this subroutine once\
	 \'a0 \'a0 MOVB	#$90,TSCR1	; enable TCNT & fast flags clear\
	 \'a0 \'a0 MOVB	#$06,TSCR2 	; configure prescale factor to 64\
	 \'a0 \'a0 MOVB	#$01,TIOS	; enable OC0\
	 \'a0 \'a0 LDD	TCNT		; Get current TCNT value\
AGAIN	 \'a0	ADDD	#37500		; start an output compare operation\
	 \'a0 \'a0 STD	TC0		; with 100 ms time delay\
WAIT	 \'a0	BRCLR	TFLG1,$01,WAIT \'a0; Wait for TCNT to catch up\
	 \'a0 \'a0 LDD	TC0		; Get the value in TC0\
	 \'a0 \'a0 DBNE	Y,AGAIN		; 1 X 100ms = 100 ms\
	 \'a0 \'a0 PULA			; Pull A\
	 \'a0 \'a0 RTS\
;\
; End of counter code\
\
\
\
\'a0 \'a0 \'a0 \'a0 	ORG $5000	; FLASH EEPROM - Section being used for lookup table storage\
TABLE \'a0 	DC.B $3F, $06, $5B, $4F, $66, $6D, $7D, $07, $7F, $67 ; Hold digit code information\
;Digit:          0,   1,   2,   3,   4,   5,   6,   7,   8,   9\
\
; Define Power-On Reset Interrupt Vector\
\
\'a0 \'a0 \'a0 \'a0 	ORG $FFFE ; $FFFE, $FFFF = Power-On Reset Int. Vector Location\
\'a0 \'a0 \'a0 \'a0 	FDB START ; Specify instruction to execute on power up\
\
; End of Interrupt code\
\'a0 \'a0 \'a0\
\'a0 \'a0 \'a0 \'a0 	END \'a0 \'a0 \'a0 \'a0; (Optional) End of source code\
}